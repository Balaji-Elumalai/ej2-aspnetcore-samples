@using Syncfusion.EJ2;
@section Meta{
                    <meta name="description" content="This example demonstrates the Print & Export in ASP.NET Core CircularGauge control. Explore here for more details."/>
                }
@section ActionDescription{
	<div id="action-description">
		<p>
			This sample demonstrates the print and export functionality of circular gauge.
		</p>
	</div>
}
@section Description{
	<div id="description">
        <p>
            In this example, you can see how to export and print the rendered circular gauge. The Circular Gauge can be exported to JPEG, PNG, SVG, and PDF formats. Print functionality is done by <code>print</code> method when <code>allowPrint</code> is set as true. Export functionality is done by <code>export</code> method when <code>allowImageExport</code> and <code>allowPdfExport</code> is set as true.
        </p>
		<p>
			More information on the print and export can be found in this
			<a target="_blank" href="https://ej2.syncfusion.com/documentation/circular-gauge/gauge-print-and-export/">documentation section</a>.
		</p>
	</div>
}
@section ControlsSection{
	<div class="col-lg-9 control-section">
		<div id="gauge1">
			<ejs-circulargauge id="gauge" load="gaugeload" allowImageExport="true" allowPdfExport="true" allowPrint="true">
				<e-circulargauge-axes>
					<e-circulargauge-axis startAngle="0" direction="AntiClockWise" endAngle="0" minimum="0" maximum="100" radius="80%">
						<e-axis-linestyle width="0"></e-axis-linestyle>
						<e-axis-labelstyle offset="2" position="Outside" useRangeColor="true">
						</e-axis-labelstyle>
						<e-axis-majorticks interval="10" position="Outside" width="1" height="25" useRangeColor="true"></e-axis-majorticks>
						<e-axis-minorticks interval="2" position="Outside" width="1" height="8" useRangeColor="true"></e-axis-minorticks>
					</e-circulargauge-axis>
				</e-circulargauge-axes>
			</ejs-circulargauge>
		</div>
	</div>

	<div class="col-lg-3 property-section">
		<table id="property" title="Properties" style="width: 100%">
			<tr style="height: 50px">
				<td style="width: 40%">
					<div>
						Export Type:
					</div>
				</td>
				<td style="width: 50%;">
					<div style="margin-left: -10px">
						<select id="mode">
							<option value='JPEG'>JPEG</option>
							<option value='PNG'>PNG</option>
							<option value='SVG'>SVG</option>
							<option value='PDF'>PDF</option>
						</select>
					</div>
				</td>
			</tr>
			<tr style="height: 50px">
				<td style="width: 40%">
					<div>File Name:</div>
				</td>
				<td style="width: 40%;">
					<div class="e-float-input" style='margin-top: 0px;'>
						<input type="text" value="Gauge" id="fileName" style="margin-left: -10px;width: 75px;">
					</div>
				</td>
			</tr>
			<tr id="button-control" style="height: 50px">
				<td>
					<div>
						<ejs-button id="export" content="Export" iconCss="e-icons e-play-icon" cssClass="e-flat"  isPrimary="true"></ejs-button>
					</div>
				</td>
				<td>
					<div>
						<ejs-button id="print" content="Print" iconCss="e-icons e-play-icon1" cssClass="e-flat" isPrimary="true"></ejs-button>
					</div>
				</td>
			</tr>
		</table>
	</div>
	<style>
		.e-play-icon::before {
			content: '\e728';
		}

		#button-control {
			width: 100%;
			text-align: center;
		}

		.e-play-icon1::before {
			content: '\e34b';
		}
	</style>
}
<script>
    window.gaugeload = function (args) {
        @* custom code start *@
        var theme = themeName ? themeName : 'Material';
        args.gauge.theme = (theme.charAt(0).toUpperCase() + theme.slice(1));
        @* custom code end *@
		window.gauge = args.gauge;
        var axis = args.gauge.axes[0];
        axis.labelStyle.font = {
			color: '#424242',
			fontFamily: 'Roboto',
			size: '12px',
			fontWeight: 'Regular'
        };
        axis.pointers = [{
			pointerWidth: 0,
			cap: {
				radius: 0,
			},
		}];
		axis.ranges = [
			{
				start: 0, end: 32,
				radius: '90%',
				startWidth: 10, endWidth: 35,
				color: '#F8A197',
			},
			{
				start: 32, end: 70,
				radius: '90%',
				startWidth: 10, endWidth: 35,
				color: '#C45072',
			},
			{
				start: 70, end: 100,
				radius: '90%',
				startWidth: 10, endWidth: 35,
				color: '#1B679F',
			}];
	}
	window.onload = function () {
		window.exportType = new ej.dropdowns.DropDownList({
			index: 0,
			width: 75
		});
		window.exportType.appendTo("#mode");
		document.getElementById("export").onclick = () => {
			var fileName = document.getElementById("fileName").value;
			window.gauge.export(window.exportType.value, fileName);
		};
		document.getElementById("print").onclick = () => {
			window.gauge.print();
		};
	};
</script>
@section Title{
                    <title>ASP.NET Core CircularGauge Print & Export Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Print & Export in ASP.NET Core CircularGauge Control</h1>
                }