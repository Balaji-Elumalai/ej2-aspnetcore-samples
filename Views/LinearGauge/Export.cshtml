@using Syncfusion.EJ2;
@section Meta{
                    <meta name="description" content="This example demonstrates the Print & Export in ASP.NET Core LinearGauge control. Explore here for more details."/>
                }
@section ActionDescription{
	<div id="action-description">
		<p>
			This sample demonstrates the print and export functionality of linear gauge.
		</p>
	</div>
}
@section Description{
	<div id="description">
        <p>
            In this example, you can see how to export and print the rendered linear gauge. The Linear Gauge can be exported to JPEG, PNG, SVG, and PDF formats. Print functionality is done by <code>print</code> method when <code>allowPrint</code> is set as true. Export functionality is done by <code>export</code> method when <code>allowImageExport</code> and <code>allowPdfExport</code> is set as true.
        </p>
		<br>
		<p>
			More information about print and export can be found in this
			<a target="_blank" href="https://ej2.syncfusion.com/documentation/linear-gauge/linear-gauge-print-and-export/">documentation section</a>.
		</p>
	</div>
}
@section ControlsSection{
	<div class="col-lg-9 control-section">
		<div id="gauge1">
			<ejs-lineargauge id="gauge" load="gaugeLoad" allowImageExport="true" allowPdfExport="true" allowPrint="true" orientation="Horizontal">
				<e-lineargauge-axes>
					<e-lineargauge-axis minimum="0" maximum="120" >
						<e-axis-line width="0"></e-axis-line>
					</e-lineargauge-axis>
				</e-lineargauge-axes>
			</ejs-lineargauge>
		</div>
	</div>
	<div class="col-lg-3 property-section">
		<table id="property" title="Properties" style="width: 100%">
			<tr style="height: 50px">
				<td style="width: 40%">
					<div>
						Export Type:
					</div>
				</td>
				<td style="width: 50%;">
					<div style="margin-left: -10px">
						<select id="mode">
							<option value='JPEG'>JPEG</option>
							<option value='PNG'>PNG</option>
							<option value='SVG'>SVG</option>
							<option value='PDF'>PDF</option>
						</select>
					</div>
				</td>
			</tr>
			<tr style="height: 50px">
				<td style="width: 40%">
					<div>File Name:</div>
				</td>
				<td style="width: 40%;">
					<div class="e-float-input" style='margin-top: 0px;'>
						<input type="text" value="Gauge" id="fileName" style="margin-left: -10px;width: 75px;">
					</div>
				</td>
			</tr>
			<tr id="button-control" style="height: 50px">
				<td>
					<div>
						<ejs-button id="export" content="Export" iconCss="e-icons e-play-icon" cssClass="e-flat" isPrimary="true"></ejs-button>
					</div>
				</td>
				<td>
					<div>
						<ejs-button id="print" content="Print" iconCss="e-icons e-play-icon1" cssClass="e-flat" isPrimary="true"></ejs-button>
					</div>
				</td>
			</tr>
		</table>
	</div>
	<style>
		.e-play-icon::before {
			content: '\e728';
		}

		#button-control {
			width: 100%;
			text-align: center;
		}

		.e-play-icon1::before {
			content: '\e34b';
		}
	</style>
	<script>
        window.gaugeLoad = function (args) {
            @* custom code start *@
            var theme = themeName ? themeName : 'Material';
            args.gauge.theme = (theme.charAt(0).toUpperCase() + theme.slice(1));
            @* custom code end *@
			window.gauge = args.gauge;
            args.gauge.orientation = "Horizontal";
            var axis = args.gauge.axes[0];
            var annotation = args.gauge.annotations[0];
            axis.majorTicks = {
				height: 0,
				width: 0,
				interval: 20
			}
			axis.labelStyle = {
				position: "Outside",
				font: {
					color: 'red'
				},
				offset: 4
			}
            axis.pointers = [{
				value: 80,
				height: 23,
				width: 35,	
				offset: -55,
				markerType: 'Triangle',
				border:
				{
					width: 2,
					color: 'white'
				}
			}];
			axis.ranges = [
				{
					start: 0,
					end: 20,
					startWidth: 15,
					endWidth: 25,
					color: '#82b944'
				},
				{
					start: 20,
					end: 40,
					startWidth: 25,
					endWidth: 35,
					color: '#a1cb43'
				},
				{
					start: 40,
					end: 60,
					startWidth: 35,
					endWidth: 45,
					color: '#ddec12'
				},
				{
					start: 60,
					end: 80,
					startWidth: 45,
					endWidth: 55,
					color: '#ffbc00'
				},
				{
					start: 80,
					end: 100,
					startWidth: 55,
					endWidth: 65,
					color: '#ff6000'
				},
				{
					start: 100,
					end: 120,
					startWidth: 65,
					endWidth: 75,
					color: 'red'
				}]
            axis.minorTicks = {
				height: 7,
				width: 0,
				interval: 4
            }
		}
		window.onload = function () {
			window.exportType = new ej.dropdowns.DropDownList({
				index: 0,
				width: 75
			});
			window.exportType.appendTo("#mode");
			document.getElementById("export").onclick = () => {
				var fileName = document.getElementById("fileName").value;
				window.gauge.export(window.exportType.value, fileName);
			};
			document.getElementById("print").onclick = () => {
				window.gauge.print();
			};
		};
	</script>

}
@section Title{
                    <title>ASP.NET Core LinearGauge Print & Export Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Print & Export in ASP.NET Core LinearGauge Control</h1>
                }