@using Syncfusion.EJ2;
@section Meta{
                    <meta name="description" content="This example demonstrates the Ranges in ASP.NET Core LinearGauge control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample illustrates how to highlight a region in an axis by using ranges in gauge. Start, end, color, and width of the range can be changed by using the options provided in the property panel.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure the ranges in linear gauge. You can use
            <code>start</code>,
            <code>end</code>,
            <code>startWidth</code>,
            <code>endWidth</code> and
            <code>position</code> properties to customize the ranges. You can also specify various colors for the ranges in the axis. If you enable
            the
            <code>useRangeColor</code> property, then the axis labels will be displayed based on its range color.
            <br>
        <p>
            More information about ranges can be found in this
            <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation section</a>.
        </p>
    </div>
}
@section ControlsSection{
    <div class="col-md-8 control-section">
        <ejs-lineargauge id="linear1" load="gaugeLoad">
            <e-lineargauge-axes>
                <e-lineargauge-axis>
                    <e-axis-line width="0"></e-axis-line>
                    <e-axis-labelstyle format="{value}%" offset="30"></e-axis-labelstyle>
                    <e-axis-majorticks height="0"></e-axis-majorticks>
                    <e-axis-minorticks height="0"></e-axis-minorticks>
                </e-lineargauge-axis>
            </e-lineargauge-axes>
        </ejs-lineargauge>
    </div>
    <div class="col-md-4 property-section">
        <table id="property" title="Properties" style="width: 100%; margin-left:-10px;">
            <tbody>
                <tr>
                    <td>
                        <div> Select Range</div>
                    </td>
                    <td>
                        <div style="margin-left: 20px;">
                            <select name="selectIndex" autocomplete="off" id="rangeIndex" style="width:90%">
                                <option value="0">Low</option>
                                <option value="1">Moderate</option>
                                <option value="2">High</option>
                            </select>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="margin-top:10px">Range Color</div>
                    </td>
                    <td>
                        <div>
                            <div class="e-float-input" style="margin-top: 0px; margin-left: 10px;">
                                <input type="text" value="#F03E3E" id="color" style="width:130px;">
                            </div>

                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Range Font Color</div>
                    </td>
                    <td>
                        <div style="margin-left: 20px">
                            <select name="selectIndex" autocomplete="off" id="useRangeColor" style="width:90%">
                                <option value="font" selected="">Default Color</option>
                                <option value="range">Range Color</option>
                            </select>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div id="startRangeValue" style="margin-top: 10px">
                            Range Start
                            <span>&nbsp;&nbsp;&nbsp;0</span>
                        </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" id="start" value="0" min="0" max="100" style="width:130px; margin-top: 10px; margin-left: 20px">
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div id="endRangeValue" style="margin-top: 20px">
                            Range End
                            <span>&nbsp;&nbsp;&nbsp;32</span>
                        </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" id="end" value="32" min="0" max="100" style="width: 130px; margin-top: 20px; margin-left: 20px">
                        </div>
                    </td>
                </tr>

                <tr>
                    <td>
                        <div id="startWidthValue" style="margin-top: 20px">
                            Range Start Width
                            <span>&nbsp;&nbsp;&nbsp;15</span>
                        </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" id="startWidth" value="15" min="0" max="30" style="width: 130px; margin-top: 20px; margin-left: 20px ">
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div id="endWidthValue" style="margin-top: 20px">
                            Range End Width
                            <span>&nbsp;&nbsp;&nbsp;15</span>
                        </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" id="endWidth" value="15" min="0" max="30" style="width: 130px; margin-top: 20px; margin-left: 20px">
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}
<script>
    window.addEventListener('load', function () {
        var rangeIndex = new ej.dropdowns.DropDownList({
            index: 0,
            placeholder: 'Select Range Bar Color',
            width: 130,
            change: function () {
                var value = +rangeIndex.value;
                var start = document.getElementById('start');
                var end = document.getElementById('end');
                var rangeColor = document.getElementById('color');
                var startWidth = document.getElementById('startWidth');
                var endWidth = document.getElementById('endWidth');
                start.value = gauge.axes[0].ranges[value].start.toString();
                end.value = gauge.axes[0].ranges[value].end.toString();
                startWidth.value = gauge.axes[0].ranges[value].startWidth.toString();
                endWidth.value = gauge.axes[0].ranges[value].endWidth.toString();
                rangeColor.value = gauge.axes[0].ranges[value].color.toString();
                document.getElementById('startWidthValue').innerHTML = 'Range Start Width<span>&nbsp;&nbsp;&nbsp;' + startWidth.value;
                document.getElementById('endWidthValue').innerHTML = 'Range End Width<span>&nbsp;&nbsp;&nbsp;' + endWidth.value;
                document.getElementById('startRangeValue').innerHTML = 'Range Start <span>&nbsp;&nbsp;&nbsp;' + start.value;
                document.getElementById('endRangeValue').innerHTML = 'Range End <span>&nbsp;&nbsp;&nbsp;' + end.value;
                gauge.refresh();
            }
        });
        rangeIndex.appendTo('#rangeIndex');
        document.getElementById('color').onchange = function () {
            var ele = document.getElementById('color');
            gauge.axes[0].ranges[+rangeIndex.value].color = ele.value;
            gauge.refresh();
        };
        document.getElementById('startWidth').ontouchmove = document.getElementById('startWidth').onpointermove =
            document.getElementById('startWidth').onchange = function () {
                var ele = document.getElementById('startWidth');
                gauge.axes[0].ranges[+rangeIndex.value].startWidth = parseInt(ele.value, 10);
            document.getElementById('startWidthValue').innerHTML = 'Range Start Width<span>&nbsp;&nbsp;&nbsp;' + ele.value;
                gauge.refresh();
            };
        document.getElementById('endWidth').ontouchmove = document.getElementById('endWidth').onpointermove =
            document.getElementById('endWidth').onchange = function () {
                var ele = document.getElementById('endWidth');
                gauge.axes[0].ranges[+rangeIndex.value].endWidth = parseInt(ele.value, 10);
            document.getElementById('endWidthValue').innerHTML = 'Range End Width<span>&nbsp;&nbsp;&nbsp;' + ele.value;
                gauge.refresh();
            };
        document.getElementById('start').ontouchmove = document.getElementById('start').onpointermove =
            document.getElementById('start').onchange = function () {
                var start = document.getElementById('start');
                var end = document.getElementById('end');
                gauge.axes[0].ranges[+rangeIndex.value].start = parseInt(start.value, 10);
                gauge.axes[0].ranges[+rangeIndex.value].end = parseInt(end.value, 10);
            document.getElementById('startRangeValue').innerHTML = 'Range Start <span>&nbsp;&nbsp;&nbsp;' + start.value;
                gauge.refresh();
            };
        document.getElementById('end').ontouchmove = document.getElementById('end').onpointermove =
            document.getElementById('end').onchange = function () {
                var start = document.getElementById('start');
                var end = document.getElementById('end');
                gauge.axes[0].ranges[+rangeIndex.value].start = parseInt(start.value, 10);
                gauge.axes[0].ranges[+rangeIndex.value].end = parseInt(end.value, 10);
            document.getElementById('endRangeValue').innerHTML = 'Range End <span>&nbsp;&nbsp;&nbsp;' + end.value;
                gauge.refresh();
            };
        var useRangeColor = new ej.dropdowns.DropDownList({
            index: 0,
            placeholder: 'Select Range Bar Color',
            width: 130,
            change: function () {
                gauge.axes[0].labelStyle.useRangeColor = (useRangeColor.value === 'range') ? true : false;
                gauge.refresh();
            }
        });
        useRangeColor.appendTo('#useRangeColor');
    });
    var gauge;
    window.gaugeLoad = function (args) {

        if (window.gaugeLoaded)
            return;
        window.gaugeLoaded = true;
        @* custom code start *@
        var theme = themeName ? themeName : 'Material';
        args.gauge.theme = (theme.charAt(0).toUpperCase() +
            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');
        @* custom code end *@
        gauge = args.gauge;
        args.gauge.orientation = "Horizontal";
        var axis = args.gauge.axes[0];
        axis.majorTicks = {
            height: 0
        };
        axis.minorTicks = {
            height: 0

        };
        axis.pointers = [
            {
                value: 35,
                height: 10,
                width: 10,
                markerType: 'Triangle',
                placement: 'Near',
                offset: -40
            }
        ];
        axis.ranges = [{
            start: 0,
            end: 32,
            color: '#30B32D',
            startWidth: 15,
            endWidth: 15
        },
        {
            start: 32,
            end: 68,
            startWidth: 15,
            endWidth: 15,
            color: '#FFDF00'
        },
        {
            start: 68,
            end: 100,
            startWidth: 15,
            endWidth: 15,
            color: '#F03E3E'
        }];

        var annotation = gauge.annotations[0];
               
        annotation.content = '<div id="pointer" style="width:20px"><h1 style="font-size:18px;">35</h1></div>';
        annotation.axisIndex = 0;
        annotation.axisValue = 35;
        annotation.y = -50;
        annotation.zIndex = '1';
    }
</script>
@section Title{
                    <title>ASP.NET Core LinearGauge Ranges Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Ranges in ASP.NET Core LinearGauge Control</h1>
                }